{
  "version": 3,
  "sources": ["../src/to-ordinal-words.ts", "../src/awry.ts"],
  "sourcesContent": [
    "const GROUP_SUFFIXES = [ '',\n  'thousand', 'million', 'billion', 'trillion', 'quadrillion', 'quintillion',\n];\nconst UNDER_TWENTY = [ '',\n  'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine', 'ten', 'eleven', 'twelve',\n  'thirteen', 'fourteen', 'fifteen', 'sixteen', 'seventeen', 'eighteen', 'nineteen',\n];\nconst UNDER_TWENTY_ORDINALS = [ '',\n  'first', 'second', 'third', 'fourth', 'fifth', 'sixth', 'seventh', 'eighth', 'ninth', 'tenth',\n  'eleventh', 'twelfth', 'thirteenth', 'fourteenth', 'fifteenth', 'sixteenth', 'seventeenth',\n  'eighteenth', 'nineteenth',\n];\nconst TENS = [ '', '',\n  'twenty', 'thirty', 'forty', 'fifty', 'sixty', 'seventy', 'eighty', 'ninety',\n];\nconst TENS_ORDINALS = [ '', '',\n  'twentieth', 'thirtieth', 'fortieth', 'fiftieth', 'sixtieth', 'seventieth', 'eightieth',\n  'ninetieth',\n];\nconst LOOKUP_CACHE = [\n  new Map<number, string>(),\n  new Map<number, string>(),\n];\n\nexport default function toOrdinalWords (number: number, removeAnds = false) {\n  const cached = LOOKUP_CACHE[+removeAnds].get(number);\n  if (cached) return cached;\n\n  const digits = number.toString().split('');\n  const parts: string[] = [];\n\n  let rmnzReached = false;\n  let group = 0;\n\n  while (digits.length) {\n    const units = parseInt(digits.pop() || '0');\n    const tens = parseInt(digits.pop() || '0');\n    const hundreds = parseInt(digits.pop() || '0');\n    const groupParts = parseGroup(hundreds, tens, units);\n    parts.unshift(...groupParts);\n  }\n\n  const ordinalWords = parts.map((part, index) => (\n    index\n      ? part.charAt(0).toUpperCase() + part.substring(1)\n      : part\n  )).join('');\n\n  LOOKUP_CACHE[+removeAnds].set(number, ordinalWords);\n\n  return ordinalWords;\n\n  function parseGroup (hundreds = 0, tens = 0, units = 0) {\n    if (!hundreds && !tens && !units) {\n      group++;\n      return [];\n    }\n\n    const parts: string[] = [];\n    const initialRmnzReached = rmnzReached;\n    const isFirstGroup = group === 0;\n\n    if (tens === 1 || units) {\n      const lookupIndex = (\n        tens > 0 && tens < 2\n          ? 9 + tens + units\n          : units\n      );\n\n      parts.push(\n        !isFirstGroup || rmnzReached\n          ? UNDER_TWENTY[lookupIndex]\n          : UNDER_TWENTY_ORDINALS[lookupIndex]\n        );\n      rmnzReached = true;\n    }\n\n    if (tens > 1) {\n      parts.unshift(\n        !isFirstGroup || rmnzReached\n          ? TENS[tens]\n          : TENS_ORDINALS[tens]\n        );\n      rmnzReached = true;\n    }\n\n    if (hundreds > 0) {\n      const hundredsParts: string[] = [\n        UNDER_TWENTY[hundreds],\n        (!isFirstGroup || rmnzReached ? 'hundred' : 'hundredth')\n      ];\n\n      if (!removeAnds && (units || tens)) hundredsParts.push('and');\n\n      rmnzReached = true;\n      parts.unshift(...hundredsParts);\n    } else if (isFirstGroup && digits.length > 3) {\n      parts.unshift('and');\n    }\n\n    if (!isFirstGroup) {\n      parts.push(\n        !initialRmnzReached && rmnzReached\n          ? GROUP_SUFFIXES[group] + 'th'\n          : GROUP_SUFFIXES[group]\n      );\n    }\n\n    group++;\n\n    return parts;\n  }\n}",
  "import toOrdinalWords from './to-ordinal-words';\n\ntype AwryType = (any[] & {\n  toObject(): any;\n  first: any;\n  last: any;\n  [key: string]: any;\n});\n\nexport function Awry (...items: any[]): AwryType {\n  let updating = false;\n\n  const awry = new Proxy(items, {\n    get: function(target, name) {\n      updateOrdinals();\n\n      return Reflect.get(target, name);\n    },\n\n    set: function (target, name, value, receiver) {\n      updateOrdinals();\n\n      return Reflect.set(target, name, value, receiver);\n    }\n  });\n\n  Object.defineProperty(awry, 'toObject', {\n    writable: false,\n    configurable: false,\n    value: function toObject () {\n      return Object.fromEntries(Object.entries(awry));\n    },\n  });\n\n  return awry as AwryType;\n\n  function updateOrdinals () {\n    if (updating) return;\n\n    updating = true;\n\n    const length = awry.length;\n    for (let x = 1; x <= length; x++) {\n      const numberWord = toOrdinalWords(x);\n      const lastNumberWord = (\n        x === length\n          ? 'last'\n          : toOrdinalWords(length - x + 1) + 'Last'\n      );\n\n      if (!(numberWord in awry)) {\n        Object.defineProperty(awry, numberWord, {\n          get: () => awry[x - 1],\n          set: value => (awry[x - 1] = value),\n          enumerable: true,\n        });\n      }\n\n      if (!(lastNumberWord in awry)) {\n        Object.defineProperty(awry, lastNumberWord, {\n          get: () => awry[x - 1],\n          set: value => (awry[x - 1] = value),\n          enumerable: true,\n        });\n      }\n    }\n\n    updating = false;\n  }\n}"
  ],
  "mappings": "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",
  "debugId": "1B257E26FC0CFE8764756e2164756e21",
  "names": []
}